- name: create osm_net
  os_network:
    auth: "{{ item.auth }}"
    name: osm_net
    # Apparently description is an unsupported param in Ansible even
    # though OpenStack supports it.
    # description: osm_net test network
    state: present
    mtu: 1400
    validate_certs: "{{ item.validate_certs }}"
    ca_cert: "{{ item.ca_cert }}"
    client_cert: "{{ item.client_cert }}"
    client_key: "{{ item.client_key }}"
  loop:
    - auth: "{{ os_migrate_src_auth }}"
      validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_src_client_key|default(omit) }}"
  tags: always

- name: create osm_uch_net
  os_network:
    auth: "{{ item.auth }}"
    name: "{{ item.name }}_net"
    # Apparently description is an unsupported param in Ansible even
    # though OpenStack supports it.
    # description: osm_net test network
    state: present
    mtu: 1400
    validate_certs: "{{ item.validate_certs }}"
    ca_cert: "{{ item.ca_cert }}"
    client_cert: "{{ item.client_cert }}"
    client_key: "{{ item.client_key }}"
  loop:
    - auth: "{{ os_migrate_src_auth }}"
      validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_src_client_key|default(omit) }}"
      name: "{{ os_migrate_src_conversion_host_name|default(omit) }}"
    - auth: "{{ os_migrate_dst_auth }}"
      validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
      name: "{{ os_migrate_dst_conversion_host_name|default(omit) }}"
  tags:
    - always

- name: Create osm subnet
  os_subnet:
    auth: "{{ item.auth }}"
    state: present
    network_name: osm_net
    name: osm_subnet
    cidr: 192.168.20.0/24
    dns_nameservers:
      - 10.11.5.19
    host_routes:
      - destination: 192.168.20.0/24
        nexthop: 192.168.20.1
    validate_certs: "{{ item.validate_certs }}"
    ca_cert: "{{ item.ca_cert }}"
    client_cert: "{{ item.client_cert }}"
    client_key: "{{ item.client_key }}"
  loop:
    - auth: "{{ os_migrate_src_auth }}"
      validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_src_client_key|default(omit) }}"
  tags: always

- name: Create osm uch subnet
  os_subnet:
    auth: "{{ item.auth }}"
    state: present
    network_name: "{{ item.name }}_net"
    name: "{{ item.name }}_subnet"
    cidr: 192.168.10.0/24
    dns_nameservers:
      - 10.11.5.19
    host_routes:
      - destination: 192.168.10.0/24
        nexthop: 192.168.10.1
    validate_certs: "{{ item.validate_certs }}"
    ca_cert: "{{ item.ca_cert }}"
    client_cert: "{{ item.client_cert }}"
    client_key: "{{ item.client_key }}"
  loop:
    - auth: "{{ os_migrate_src_auth }}"
      validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_src_client_key|default(omit) }}"
      name: "{{ os_migrate_src_conversion_host_name|default(omit) }}"
    - auth: "{{ os_migrate_dst_auth }}"
      validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
      name: "{{ os_migrate_dst_conversion_host_name|default(omit) }}"
  tags:
    - always

- name: Create security group
  os_security_group:
    auth: "{{ item.auth }}"
    state: present
    name: osm_security_group
    description: OSM security group
    validate_certs: "{{ item.validate_certs }}"
    ca_cert: "{{ item.ca_cert }}"
    client_cert: "{{ item.client_cert }}"
    client_key: "{{ item.client_key }}"
  loop:
    - auth: "{{ os_migrate_src_auth }}"
      validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_src_client_key|default(omit) }}"
  tags: always

- name: Create security group rule
  os_security_group_rule:
    auth: "{{ item.auth }}"
    security_group: osm_security_group
    remote_ip_prefix: 0.0.0.0/0
    validate_certs: "{{ item.validate_certs }}"
    ca_cert: "{{ item.ca_cert }}"
    client_cert: "{{ item.client_cert }}"
    client_key: "{{ item.client_key }}"
  loop:
    - auth: "{{ os_migrate_src_auth }}"
      validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_src_client_key|default(omit) }}"
  tags: always

- name: create osm_router
  os_router:
    auth: "{{ item.auth }}"
    name: osm_router
    state: present
    network: "{{ os_migrate_src_router_external_network|default('public') }}"
    interfaces:
      - net: osm_net
        subnet: osm_subnet
        portip: 192.168.20.1
    validate_certs: "{{ item.validate_certs }}"
    ca_cert: "{{ item.ca_cert }}"
    client_cert: "{{ item.client_cert }}"
    client_key: "{{ item.client_key }}"
  loop:
    - auth: "{{ os_migrate_src_auth }}"
      validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_src_client_key|default(omit) }}"
  tags: always

- name: create osm_uch_router
  os_router:
    auth: "{{ item.auth }}"
    name: "{{ item.name }}_router"
    state: present
    network: "{{ item.external_network }}"
    interfaces:
      - net: "{{ item.name }}_net"
        subnet: "{{ item.name }}_subnet"
        portip: 192.168.10.1
    validate_certs: "{{ item.validate_certs }}"
    ca_cert: "{{ item.ca_cert }}"
    client_cert: "{{ item.client_cert }}"
    client_key: "{{ item.client_key }}"
  loop:
    - auth: "{{ os_migrate_src_auth }}"
      validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_src_client_key|default(omit) }}"
      name: "{{ os_migrate_src_conversion_host_name|default(omit) }}"
      external_network:
        "{{ os_migrate_src_router_external_network|default('public') }}"
    - auth: "{{ os_migrate_dst_auth }}"
      validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
      name: "{{ os_migrate_dst_conversion_host_name|default(omit) }}"
      external_network:
        "{{ os_migrate_dst_router_external_network|default('public') }}"
  tags:
    - always

- name: Create the key folder
  file:
    path: "{{ '~' | expanduser }}/ssh-ci"
    mode: 0700
    state: directory
  tags: always

- name: Generate a keypair for the migration
  # This will not regenerate the key if
  # it already exists
  openssh_keypair:
    path: "{{ '~' | expanduser }}/ssh-ci/id_rsa"
  tags: always

- name: Create new keypair as osm_key
  os_keypair:
    auth: "{{ item.auth }}"
    state: present
    name: osm_key
    public_key_file: "{{ '~' | expanduser }}/ssh-ci/id_rsa.pub"
    validate_certs: "{{ item.validate_certs }}"
    ca_cert: "{{ item.ca_cert }}"
    client_cert: "{{ item.client_cert }}"
    client_key: "{{ item.client_key }}"
  loop:
    - auth: "{{ os_migrate_src_auth }}"
      validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_src_client_key|default(omit) }}"
    - auth: "{{ os_migrate_dst_auth }}"
      validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
  tags:
    - always

- name: create osm_server
  os_server:
    auth: "{{ os_migrate_src_auth }}"
    name: osm_server
    state: present
    # TODO: We don't have flavors or images
    flavor: "{{ os_migrate_src_osm_server_flavor|default(m1.small) }}"
    key_name: osm_key
    image: "{{ os_migrate_src_osm_server_image|default(omit) }}"
    network: osm_net
    security_groups: osm_security_group
    # We get a floating IP
    # for the workload VM
    auto_ip: yes
    # Wait for the instance to be created
    wait: yes
    validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
    ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
    client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
    client_key: "{{ os_migrate_src_client_key|default(omit) }}"
  tags: always

- name: create osm_uch in both tenants
  os_server:
    auth: "{{ item.auth }}"
    name: "{{ item.name }}"
    state: present
    # TODO: We don't have flavors or images
    flavor: "{{ item.flavor }}"
    key_name: osm_key
    image: "{{ os_migrate_conversion_host_image }}"
    network: "{{ item.name }}_net"
    security_groups: default
    # We need a floating IP
    auto_ip: yes
    reuse_ips: yes
    # Wait for the instance to be created
    wait: yes
    validate_certs: "{{ item.validate_certs }}"
    ca_cert: "{{ item.ca_cert }}"
    client_cert: "{{ item.client_cert }}"
    client_key: "{{ item.client_key }}"
  loop:
    - auth: "{{ os_migrate_src_auth }}"
      validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_src_client_key|default(omit) }}"
      name: "{{ os_migrate_src_conversion_host_name|default(omit) }}"
      flavor: "{{ os_migrate_src_conversion_host_flavor|default(omit) }}"
    - auth: "{{ os_migrate_dst_auth }}"
      validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
      ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
      client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
      client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
      name: "{{ os_migrate_dst_conversion_host_name|default(omit) }}"
      flavor: "{{ os_migrate_dst_conversion_host_flavor|default(omit) }}"
  tags:
    - always

# This is just to unblock CI. Inserting the main private ssh key into
# the migration host itself is undesirable for end user envs. Once we
# switch to a proper playbook which deploys conversion hosts, this
# should be solved better, by generating another key and authorizing
# dst conv host to ssh into src conv host.
- name: Hack to insert ssh key to dst host
  block:
    - name: Fetch dst conv host info
      os_server_info:
        filters:
          name: "{{ os_migrate_dst_conversion_host_name }}"
        auth: "{{ os_migrate_dst_auth }}"
        validate_certs: "{{ os_migrate_dst_validate_certs|default(omit) }}"
        ca_cert: "{{ os_migrate_dst_ca_cert|default(omit) }}"
        client_cert: "{{ os_migrate_dst_client_cert|default(omit) }}"
        client_key: "{{ os_migrate_dst_client_key|default(omit) }}"
      register: _dst_conv_host

    - name: Set dst conv host ip fact
      set_fact:
        _dst_conv_ip: "{{ _dst_conv_host.openstack_servers[0].accessIPv4 }}"

    - name: Wait until the dst conversion host is reachable
      wait_for:
        port: 22
        host: '{{ _dst_conv_ip }}'
        search_regex: OpenSSH
        delay: 10
        timeout: 600

    - name: Inject ssh key to dst host
      shell: |
        ssh -o StrictHostKeyChecking=no \
            -i {{ '~' | expanduser }}/ssh-ci/id_rsa \
            cloud-user@{{ _dst_conv_ip }} mkdir -p .ssh
        cat "{{ '~' | expanduser }}/ssh-ci/id_rsa" \
            | ssh -o StrictHostKeyChecking=no \
                -i {{ '~' | expanduser }}/ssh-ci/id_rsa \
                cloud-user@{{ _dst_conv_ip }} "cat > .ssh/id_rsa"
        ssh -o StrictHostKeyChecking=no \
            -i {{ '~' | expanduser }}/ssh-ci/id_rsa \
            cloud-user@{{ _dst_conv_ip }} chmod 0700 .ssh
        ssh -o StrictHostKeyChecking=no \
            -i {{ '~' | expanduser }}/ssh-ci/id_rsa \
            cloud-user@{{ _dst_conv_ip }} chmod 0600 .ssh/id_rsa


# In order to be able to migrate the VMS they must be turned off
- name: Shutdown osm_server
  os_server_action:
    auth: "{{ os_migrate_src_auth }}"
    server: osm_server
    action: stop
    wait: yes
    validate_certs: "{{ os_migrate_src_validate_certs|default(omit) }}"
    ca_cert: "{{ os_migrate_src_ca_cert|default(omit) }}"
    client_cert: "{{ os_migrate_src_client_cert|default(omit) }}"
    client_key: "{{ os_migrate_src_client_key|default(omit) }}"
  tags: always
